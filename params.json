{"name":"ZF2 Lazy Form","tagline":"Lazy Form for Zend Framework 2","body":"Lazy Form for Zend Framework 2\r\n=============\r\nDeveloped and Maintained by Ibrahim Azhar Armar\r\n\r\n[![Gitter](https://badges.gitter.im/oromedialab/zf2-lazy-form.svg)](https://gitter.im/oromedialab/zf2-lazy-form?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\r\n\r\nIntroduction\r\n------------\r\nDid you ever get frustrated by the fact that you have to repeat the same validators, filters, attributes and options over and over again in different forms and elements leading to code duplication and maintenance nightmare? we have read numerous time about [DRY - Don't repeat yourself](https://en.wikipedia.org/wiki/Don't_repeat_yourself) or [OAOO - Once and Only Once](http://c2.com/cgi/wiki?OnceAndOnlyOnce), but do we really follow it?\r\n\r\nZf2LazyForm module is developed to eliminate duplication and encourage reuse. We enhanced the module to support numerous features on top of existing features of zend-form\r\n* [Short Syntax](https://github.com/oromedialab/zf2-lazy-form#short-syntax)\r\n* [Configurable Validators, Filters, Attrbutes & Options](https://github.com/oromedialab/zf2-lazy-form#configurable-validators-filters-attrbutes--options)\r\n* [Lazy Set](https://github.com/oromedialab/zf2-lazy-form#lazy-set)\r\n* [Placeholders](https://github.com/oromedialab/zf2-lazy-form#placeholders)\r\n* [Global Form Elements and Attributes](https://github.com/oromedialab/zf2-lazy-form#global-form-elements-and-attributes)\r\n* [Configurable Error Messages](#) - @TODO\r\n\r\nInstallation\r\n------------\r\n\r\n#### Install using composer\r\n```\r\ncomposer require oromedialab/zf2-lazy-form dev-master\r\n```\r\n\r\n#### Install using GIT clone\r\n```\r\ngit clone https://github.com/oromedialab/zf2-lazy-form.git\r\n```\r\n\r\n#### Enable Zf2 Module\r\nEnable the module by adding `Oml\\Zf2LazyForm` in your `config/application.config.php` file.\r\n\r\nImportant Instruction\r\n------------\r\nForm must be initialized using FormElementManager, lets see an example \r\n```php\r\n// Correct approach\r\n$sm = $this->getServiceLocator();\r\n$form = $sm->get('FormElementManager')->get('User\\Form\\Create');\r\n\r\n// Incorrect approach\r\n$sm = $this->getServiceLocator();\r\n$form = new User\\Form\\Create();\r\n```\r\n\r\nExample\r\n------------\r\n\r\n#### Short Syntax\r\nLet's consider the below example to define form element using short syntax\r\n```php\r\nuse Oml\\Zf2LazyForm\\Form\\Base;\r\n\r\nclass MyForm extends Base\r\n{\r\n\tpublic function init\r\n\t{\r\n\t\t// First Name\r\n\t\t$this->addFormElement(['name' => 'first_name', 'label' => 'First name', 'type' => 'text']);\r\n\t\t// Last Name\r\n\t\t$this->addFormElement(['name' => 'last_name', 'label' => 'Last name', 'type' => 'text']);\r\n\t\t// Remove form element\r\n\t\t$this->removeFormElement('last_name');\r\n\t\t// It is IMPORTANT to call parent::init() in the bottom, failing to add this will end-up in form not being displayed\r\n\t\tparent::init();\r\n\t}\r\n}\r\n```\r\nWhen an element is defined using `addFormElement()` by default empty input filters are injected, you don't have to worry about defining input filters separately. To be precise you never define input filters in form again, instead you define it in the config file and reuse it across forms and elements, we'll see an example of this below\r\n\r\nYou can also use [short names](http://framework.zend.com/manual/current/en/modules/zend.form.advanced-use-of-forms.html#short-names) offered by ZF2, instead of writing `Zend\\Form\\Element\\Text` for defining form elements, you can just type `text`, same goes for rest of elements\r\n\r\n#### Configurable Validators, Filters, Attrbutes & Options\r\nDefine validators, filters, attributes and options in config file to reuse it across forms and elements. the syntax is same as what you use in zend-form\r\n\r\n```php\r\nreturn [\r\n\t'oml' => [\r\n\t\t'zf2-lazy-form' => [\r\n\t\t\t'validators' => [\r\n\t\t\t\t'not-empty' => ['name' => 'NotEmpty'],\r\n\t\t\t\t'string-length' => [\r\n\t                'name'    => 'StringLength',\r\n\t                'options' => array(\r\n\t                    'encoding' => 'UTF-8',\r\n\t                    'min' => 2,\r\n\t                    'max' => 255\r\n\t                )\r\n\t\t\t\t]\r\n\t\t\t],\r\n\t\t\t'filters' => [\r\n\t\t\t\t'strip-tags' => ['name' => 'StripTags'],\r\n\t            'string-trim' => ['name' => 'StringTrim']\r\n\t\t\t]\r\n\t\t\t'attributes' => [\r\n\t\t\t\t'submit-btn' => [\r\n\t\t\t\t\t'type' => 'submit',\r\n\t\t\t\t\t'class' => 'submit-btn'\r\n\t\t\t\t]\r\n\t\t\t],\r\n\t\t\t'options' => [\r\n\t\t\t\t'label-option' => [\r\n\t\t\t\t\t'label_attributes' => [\r\n\t\t                'class' => 'col-sm-2 font_16'\r\n\t\t            ]\r\n\t\t\t\t]\r\n\t\t\t]\r\n\t\t]\r\n\t]\r\n];\r\n```\r\n\r\n#### Lazy Set\r\nOnce configuration is defined, it can be reused using lazy-set\r\n\r\n```php\r\nreturn [\r\n\t'oml' => [\r\n\t\t'zf2-lazy-form' => [\r\n\t\t\t'lazy-set' => [\r\n\t\t\t\t1 => [\r\n\t\t\t\t\t'validators' => ['not-empty', 'string-length'],\r\n\t\t\t\t\t'filters' => ['strip-tags', 'string-trim'],\r\n\t\t\t\t\t'attributes' => ['submit-btn'],\r\n\t\t\t\t\t'options' => ['label-option']\r\n\t\t\t\t],\r\n\t\t\t\t2 => [\r\n\t\t\t\t\t'attributes' => ['submit-btn'],\r\n\t\t\t\t\t'filters' => false\r\n\t\t\t\t]\r\n\t\t\t]\r\n\t\t]\r\n\t]\r\n];\r\n```\r\n\r\nTo use lazy-set(s) in your form element, you need to define it in each element using an array, refer the example below where we apply `lazy-set = [1]` to an element\r\n\r\n```php\r\n$this->addFormElement(['name' => 'first_name', 'label' => 'First name', 'type' => 'text', 'lazy-set' => [1]]);\r\n```\r\n\r\nIn some cases you may want to disable filters, you can do it by using `filters => false`, refer the below example where we apply `lazy-set = 2` which has an element with `filters => false`\r\n\r\n```php\r\n$this->addFormElement(['name' => 'submit', 'label' => 'Submit', 'type' => 'button', 'lazy-set' => [2]]);\r\n```\r\n\r\n#### Placeholders\r\nIn many instances you may want to define different validation values for a given validator. Lets consider `StringLength` where it makes sense to have a default minimum and maximum length for all form elements, however for specific element we may want to overwrite it with specific values, this is where `Placeholders` comes to our rescue, lets see some example\r\n\r\n```php\r\nreturn [\r\n\t'oml' => [\r\n\t\t'zf2-lazy-form' => [\r\n\t\t\t'validators' => [\r\n\t\t\t\t'not_empty' => ['name' => 'NotEmpty'],\r\n\t\t\t\t'string_length' => [\r\n                    'name'    => 'StringLength',\r\n                    'options' => array(\r\n                        'encoding' => 'UTF-8',\r\n                        'min' => ':min',\r\n                        'max' => ':max',\r\n                    )\r\n\t\t\t\t]\r\n\t\t\t]\r\n\t\t]\r\n\t]\r\n];\r\n```\r\nThe defined placeholder `:min` and `:max` in above configuration can be replaced on 3 level\r\n* Global\r\n* Form\r\n* Element\r\n\r\nReplace placeholder value on a global level\r\n```php\r\n// Apply global placeholder\r\nreturn [\r\n\t'oml' => [\r\n\t\t'zf2-lazy-form' => [\r\n\t\t\t'default' => [\r\n\t\t\t\t'placeholder' => [\r\n\t\t\t\t\t':min' => 2,\r\n\t\t\t\t\t':max' => 200\r\n\t\t\t\t]\r\n\t\t\t]\r\n\t\t]\r\n\t]\r\n];\r\n```\r\n\r\nReplace placeholder value on a form level\r\n```php\r\nuse Oml\\Zf2LazyForm\\Form\\Base;\r\n\r\nclass MyForm extends Base\r\n{\r\n\tpublic function init\r\n\t{\r\n\t\t// Overwrite :min and :max value for this form\r\n\t\t$this->setPlaceholderParameter(':min', 20);\r\n\t\t$this->setPlaceholderParameter(':max', 500);\r\n\t\t// Add form element\r\n\t\t$this->addFormElement(['name' => 'first_name', 'label' => 'First name', 'type' => 'text', 'lazy-set' => [1]]);\r\n\t\t// It is IMPORTANT to call parent::init() in the bottom, failing to add this will end-up in form not being displayed\r\n\t\tparent::init();\r\n\t}\r\n}\r\n```\r\n\r\nReplace placeholder value per element\r\n```php\r\nuse Oml\\Zf2LazyForm\\Form\\Base;\r\n\r\nclass MyForm extends Base\r\n{\r\n\tpublic function init\r\n\t{\r\n\t\t// Overwrite :min and :max value for first name\r\n\t\t$this->setPlaceholderParameter(':min', 20, 'first_name');\r\n\t\t$this->setPlaceholderParameter(':max', 500, 'first_name');\r\n\t\t// Add form element\r\n\t\t$this->addFormElement(['name' => 'first_name', 'label' => 'First name', 'type' => 'text', 'lazy-set' => [1]]);\r\n\t\t// It is IMPORTANT to call parent::init() in the bottom, failing to add this will end-up in form not being displayed\r\n\t\tparent::init();\r\n\t}\r\n}\r\n```\r\n\r\n#### Zend\\ServiceManager\\ServiceManager\r\nYou can access ServiceManager object in your `Form::init()` by using `$this->getServiceLocator()`. Because form is intiailized using `FormElementManager`, by default an instance of `ServiceManager` is injected in the form\r\n\r\n#### Global Form Elements and Attributes\r\nMost often we use common elements in forms such as, all forms must have a submit button, a csrf token must be included, it must contain specific class names, or bind hydator etc. this can be done easily using closure in your config file\r\n\r\n```php\r\nreturn [\r\n\t'oml' => [\r\n\t\t'zf2-lazy-form' => [\r\n\t\t\t'*' => function(\\Zend\\Form\\Form $form) {\r\n\t\t\t\t// Apply form attribute\r\n\t\t\t\t$form->setAttribute('class', 'form-horizontal form');\r\n\t\t\t\t// Add an element in the form\r\n\t\t\t\t$form->addFormElement(['name' => 'submit', 'label' => 'Submit', 'type' => 'button', 'lazy-set' => [2]]);\r\n\t\t\t\t// Set hydrator\r\n\t\t\t\t$form->setHydrator(new \\Zend\\Stdlib\\Hydrator\\ClassMethods(true));\r\n\t\t\t},\r\n\t\t]\r\n\t]\r\n];\r\n```\r\nAn instance of `Zend\\Form` is injected by default when you define `$config['oml']['zf2-lazy-form'][*]` with closure, this allows you to modify or add elements to the form on a global level, you can also use `addFormElement()` or other available module functions here\r\n\r\nOptions\r\n------------\r\nAvailable Options in Config File :\r\n\r\n- `$config['oml']['zf2-lazy-form']['*'] = function(\\Zend\\Form\\Form $form){}` : Global elements and attributes\r\n- `$config['oml']['zf2-lazy-form']['default']['placeholder']` : Default values for placeholder\r\n- `$config['oml']['zf2-lazy-form']['attributes']` : Form element attributes\r\n- `$config['oml']['zf2-lazy-form']['options']` : Form element options\r\n- `$config['oml']['zf2-lazy-form']['validators']` : Form element validators\r\n- `$config['oml']['zf2-lazy-form']['filters']` : Form element filters\r\n- `$config['oml']['zf2-lazy-form']['lazy-set']` : Lazy set for reusable elements\r\n\r\nAvailable Options in Form Class Extending `Oml\\Zf2LazyForm\\Form\\Base` :\r\n- `addFormElement(array $params)` : Accepts name, type, label and lazy-set\r\n- `removeFormElement($name)` : Remove form element\r\n- `setPlaceholderParameter($name, $value, $elementName = null)` : Replace placeholder value for form or element\r\n\r\nFeel free to use native zend-form functions parallelly with this module if the function offered by this module does not suffice your need. it is designed to avoid conflict with existing `Zend\\Form` functionality, hence allowing you to use `add()` or `addFormElement()` together in your form\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}